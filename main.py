from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import json, os

TOKEN = "7491927850:AAEhqhwu1s94zjIi9MeYyCLWrZNLQXOUJIo"
SETTINGS_FILE = "user_settings.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
if os.path.exists(SETTINGS_FILE):
    with open(SETTINGS_FILE, "r") as f:
        user_settings = json.load(f)
else:
    user_settings = {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª
def save_settings():
    with open(SETTINGS_FILE, "w") as f:
        json.dump(user_settings, f)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏", callback_data="autobuy_settings")]
    ])

# –ú–µ–Ω—é –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏
def autobuy_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –õ–∏–º–∏—Ç —Ü–µ–Ω—ã", callback_data="set_price_limit")],
        [InlineKeyboardButton("üéÅ –õ–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞", callback_data="set_quantity_limit")],
        [InlineKeyboardButton("üîÑ –ö–æ–ª-–≤–æ —Ü–∏–∫–ª–æ–≤", callback_data="set_cycles")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

# –ü–æ–¥–º–µ–Ω—é –ª–∏–º–∏—Ç–æ–≤
price_limits = [5, 10, 22, 50, 100, 160, 300, 500, 1000, 1500, 2000, 2500, 5000, 10000, 15000, 20000, 30000]
def price_limit_menu():
    keyboard = [[InlineKeyboardButton(f"‚≠ê {val}", callback_data=f"price_{val}") for val in price_limits[i:i+3]] for i in range(0, len(price_limits), 3)]
    keyboard.append([InlineKeyboardButton("‚≠ê –£–±—Ä–∞—Ç—å –ª–∏–º–∏—Ç", callback_data="remove_price_limit")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="autobuy_settings")])
    return InlineKeyboardMarkup(keyboard)

quantity_limits = [500, 1000, 1500, 1999, 2000, 3000, 5000, 7500, 10000, 15000, 25000, 50000, 100000, 250000]
def quantity_limit_menu():
    keyboard = [[InlineKeyboardButton(f"{val}", callback_data=f"quantity_{val}") for val in quantity_limits[i:i+2]] for i in range(0, len(quantity_limits), 2)]
    keyboard.append([InlineKeyboardButton("‚≠ê –£–±—Ä–∞—Ç—å –ª–∏–º–∏—Ç", callback_data="remove_quantity_limit")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="autobuy_settings")])
    return InlineKeyboardMarkup(keyboard)

cycle_limits = [1, 2, 3, 5, 10, 20, 30, 50, 75, 100]
def cycle_limit_menu():
    keyboard = [[InlineKeyboardButton(str(val), callback_data=f"cycle_{val}") for val in cycle_limits[i:i+3]] for i in range(0, len(cycle_limits), 3)]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="autobuy_settings")])
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç!", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)

    if user_id not in user_settings:
        user_settings[user_id] = {}

    data = query.data

    if data == "back_to_main":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

    elif data == "profile":
        settings = user_settings.get(user_id, {})
        text = f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        text += f"–õ–∏–º–∏—Ç —Ü–µ–Ω—ã: ‚≠ê {settings.get('price_limit', '–Ω–µ –∑–∞–¥–∞–Ω')}\n"
        text += f"–õ–∏–º–∏—Ç –ø–æ–¥–∞—Ä–∫–æ–≤: üéÅ {settings.get('quantity_limit', '–Ω–µ –∑–∞–¥–∞–Ω')}\n"
        text += f"–¶–∏–∫–ª–æ–≤ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏: üîÑ {settings.get('cycles', '–Ω–µ –∑–∞–¥–∞–Ω')}"
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]))

    elif data == "autobuy_settings":
        await query.edit_message_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏:", reply_markup=autobuy_menu())

    elif data == "set_price_limit":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –ª–∏–º–∏—Ç —Ü–µ–Ω—ã:", reply_markup=price_limit_menu())

    elif data.startswith("price_"):
        price = int(data.split("_")[1])
        user_settings[user_id]["price_limit"] = price
        save_settings()
        await query.edit_message_text(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç —Ü–µ–Ω—ã: ‚≠ê {price}", reply_markup=autobuy_menu())

    elif data == "remove_price_limit":
        user_settings[user_id].pop("price_limit", None)
        save_settings()
        await query.edit_message_text("–õ–∏–º–∏—Ç —Ü–µ–Ω—ã —É–¥–∞–ª—ë–Ω.", reply_markup=autobuy_menu())

    elif data == "set_quantity_limit":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–∞—Ä–∫–æ–≤:", reply_markup=quantity_limit_menu())

    elif data.startswith("quantity_"):
        quantity = int(data.split("_")[1])
        user_settings[user_id]["quantity_limit"] = quantity
        save_settings()
        await query.edit_message_text(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç –ø–æ–¥–∞—Ä–∫–æ–≤: üéÅ {quantity}", reply_markup=autobuy_menu())

    elif data == "remove_quantity_limit":
        user_settings[user_id].pop("quantity_limit", None)
        save_settings()
        await query.edit_message_text("–õ–∏–º–∏—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ —É–¥–∞–ª—ë–Ω.", reply_markup=autobuy_menu())

    elif data == "set_cycles":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏:", reply_markup=cycle_limit_menu())

    elif data.startswith("cycle_"):
        cycles = int(data.split("_")[1])
        user_settings[user_id]["cycles"] = cycles
        save_settings()
        await query.edit_message_text(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤: üîÑ {cycles}", reply_markup=autobuy_menu())

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è Render)
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_query))

if __name__ == "__main__":
    app.run_polling()
