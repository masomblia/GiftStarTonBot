from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, CommandHandler, ContextTypes
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É)
settings = {
    "autobuy": False,
    "price_min": 0,
    "price_max": 999,
    "supply_limit": 100,
    "buy_cycles": 1
}

# –ú–µ–Ω—é
def get_main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üîÅ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞: {'–í–ö–õ' if settings['autobuy'] else '–í–´–ö–õ'}", callback_data='toggle_autobuy')],
        [InlineKeyboardButton(f"üí∞ –õ–∏–º–∏—Ç —Ü–µ–Ω—ã: {settings['price_min']} - {settings['price_max']}", callback_data='set_price')],
        [InlineKeyboardButton(f"üì¶ –õ–∏–º–∏—Ç supply: {settings['supply_limit']}", callback_data='set_supply')],
        [InlineKeyboardButton(f"üîÇ –¶–∏–∫–ª—ã –ø–æ–∫—É–ø–∫–∏: {settings['buy_cycles']}", callback_data='set_cycles')],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='refresh')]
    ])

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Ç–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏:", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "toggle_autobuy":
        settings["autobuy"] = not settings["autobuy"]
    elif query.data == "refresh":
        pass  # –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å
    elif query.data == "set_price":
        await query.edit_message_text("üí° –ù–∞–ø–∏—à–∏ –ª–∏–º–∏—Ç—ã —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: `10 100`")
        context.user_data["awaiting"] = "price"
        return
    elif query.data == "set_supply":
        await query.edit_message_text("üí° –ù–∞–ø–∏—à–∏ –ª–∏–º–∏—Ç supply, –Ω–∞–ø—Ä–∏–º–µ—Ä: `50`")
        context.user_data["awaiting"] = "supply"
        return
    elif query.data == "set_cycles":
        await query.edit_message_text("üí° –ù–∞–ø–∏—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –ø–æ–∫—É–ø–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: `2`")
        context.user_data["awaiting"] = "cycles"
        return

    await query.edit_message_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–≤–æ–¥ –ª–∏–º–∏—Ç–æ–≤)
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "awaiting" not in context.user_data:
        return

    mode = context.user_data["awaiting"]
    text = update.message.text.strip()

    try:
        if mode == "price":
            parts = list(map(int, text.split()))
            settings["price_min"], settings["price_max"] = parts[0], parts[1]
        elif mode == "supply":
            settings["supply_limit"] = int(text)
        elif mode == "cycles":
            settings["buy_cycles"] = int(text)
        context.user_data.pop("awaiting")
        await update.message.reply_text("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=get_main_menu())
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    import asyncio
    from telegram.ext import MessageHandler, filters

    token = os.getenv("BOT_TOKEN")

    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), text_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
